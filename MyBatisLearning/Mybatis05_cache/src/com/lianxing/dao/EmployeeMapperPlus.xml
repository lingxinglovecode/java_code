<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lianxing.dao.EmployeeMapperPlus">
<!--    名称空间 指定为接口的全类名-->

<!--    自定义封装规则
       type：自定义规则的java类型
       id：唯一id方便引用
       -->
    <resultMap type="com.lianxing.bean.Employee" id="MyEmp">
        <!--指定主键列的封装规则
		id定义主键会底层有优化；
		column：指定哪一列,在sql中列名
		property：指定对应的javaBean属性
		  -->
        <id column="id" property="id"/>
        <!-- 定义普通列封装规则 -->
        <result column="last_name" property="lastName"/>
        <!-- 其他不指定的列会自动封装：推荐只要写resultMap就把全部的映射规则都写上。 -->
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
    </resultMap>
<!--    public Employee getEmpById(Integer id);-->
    <select id="getEmpById"  resultMap="MyEmp">
        select * from tbl_employee where id = #{id}
    </select>

    <!--
	场景一：
		查询Employee的同时查询员工对应的部门
		Employee===Department
		一个员工有与之对应的部门信息；
		id  last_name  gender    d_id     did  dept_name (private Department dept;)
	 -->

    <resultMap type="com.lianxing.bean.Employee" id="MyEmpDif">
        <id column="id" property="id"></id>
        <result column="last_name" property="lastName"/>
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
<!--        <result column="did" property="dept.id"/>-->
<!--        <result column="dept_name" property="dept.departmentName"/>-->


        <!--  association可以指定联合的javaBean对象
		property="dept"：指定哪个属性是联合的对象
		javaType:指定这个属性对象的类型[不能省略]
		-->
        <association property="dept" javaType="com.lianxing.bean.Department">
            <id column="did" property="id"/>
            <result column="dept_name" property="departmentName"/>
        </association>
    </resultMap>

    <!--    public Employee getEmpById(Integer id);-->
    <select id="getEmpAndDept"  resultMap="MyEmpDif">
        SELECT e.id id,e.last_name last_name,e.gender gender,e.email email,e.d_id d_id,
               d.id did,d.dept_name dept_name FROM tbl_employee e,tbl_dept d
        WHERE e.d_id=d.id AND e.id=2
    </select>





    <!--  id  last_name  email   gender    d_id   -->
    <resultMap type="com.lianxing.bean.Employee" id="MyEmpByStep">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
        <!-- association定义关联对象的封装规则
            select:表明当前属性是调用select指定的方法查出的结果
            column:指定将哪一列的值传给这个方法

            流程：使用select指定的方法（传入column指定的这列参数的值）查出对象，并封装给property指定的属性
         -->
        <association property="dept"
                     select="com.lianxing.dao.DepartmentMapper.getDeptById"
                     column="d_id">
        </association>
    </resultMap>

<!--    public Employee getEmpByIdStep(Integer id);-->
    <select id="getEmpByIdStep"  resultMap="MyEmpByStep">
        select * from tbl_employee where id = #{id}
    </select>


    <!-- 可以使用延迟加载（懒加载）；(按需加载)
	 	Employee==>Dept：
	 		我们每次查询Employee对象的时候，都将一起查询出来。
	 		部门信息在我们使用的时候再去查询；
	 		分段查询的基础之上加上两个配置：
	  -->



<!--    public List<Employee> getEmpsByDept(Integer id);-->
    <select id="getEmpsByDept"  resultType="com.lianxing.bean.Employee">
        select * from tbl_employee where id = #{did}
    </select>





</mapper>