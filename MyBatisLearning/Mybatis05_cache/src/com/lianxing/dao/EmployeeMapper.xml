<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lianxing.dao.EmployeeMapper">
<!--    名称空间 指定为接口的全类名-->
<cache type="org.mybatis.caches.ehcache.EhcacheCache"></cache>
<!--   接口中功能 public Employee getEmpById(Integer id)-->
    <select id="getEmpById" resultType="com.lianxing.bean.Employee">
        select id,last_name,gender,email from tbl_employee where id = #{id}
    </select>

    <!--   接口中功能 getEmpByIdAndLastName(@Param("id") Integer id,@Param("lastName") String lastName)-->
    <select id="getEmpByIdAndLastName" resultType="com.lianxing.bean.Employee">
        select id,last_name,gender,email from tbl_employee where id = #{id} and last_name = #{lastName}
    </select>


<!--    public List<Employee> getEmpByNameLike(String name);-->
    <select id="getEmpByNameLike" resultType="com.lianxing.bean.Employee">
        select id,last_name,gender,email from tbl_employee where last_name like #{last_name}
    </select>

    <!--    public Map<String,Object> getEmpByIdReturnMap(Integer id);-->
    <select id="getEmpByIdReturnMap" resultType="map">
        select id,last_name,gender,email from tbl_employee where id = #{id}
    </select>


    <!--   接口中功能 public Employee getEmpByMap(Map<String,Object> map)-->
    <select id="getEmpByMap" resultType="com.lianxing.bean.Employee">
        select id,last_name,gender,email from tbl_employee where id = #{id} and last_name = #{lastName}
    </select>

<!--    public Map<Integer,Employee> getEmpByIdLastNameReturnMap((String name);-->
    <select id="getEmpByIdLastNameReturnMap" resultType="map">
        select id,last_name,gender,email from tbl_employee where last_name like #{last_name}
    </select>

    <!--
	场景一：
		查询Employee的同时查询员工对应的部门
		Employee===Department
		一个员工有与之对应的部门信息；
		id  last_name  gender    d_id     did  dept_name (private Department dept;)
	 -->
    <select id="">


    </select>


    <!--    public void addEmp(Employee employee)-->
    <!-- parameterType：参数类型，可以省略，
	获取自增主键的值：
		mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGenreatedKeys()；
		useGeneratedKeys="true"；使用自增主键获取主键值策略
		keyProperty；指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javaBean的哪个属性
	-->
    <insert id="addEmp" parameterType="com.lianxing.bean.Employee"
        useGeneratedKeys="true" keyProperty="id">
        insert into tbl_employee(last_name,email,gender)
        values(#{lastName},#{email},#{gender})
    </insert>

<!--    public void updateEmp(Employee employee);-->
    <update id="updateEmp" >
        update tbl_employee
        set last_name=#{lastName},email=#{email},gender=#{gender}
        where id=#{id}
    </update>


<!--    public void deleteEmpById(Integer id);-->
    <delete id="deleteEmpById">
        delete  from tbl_employee where id = #{id}
    </delete>

</mapper>